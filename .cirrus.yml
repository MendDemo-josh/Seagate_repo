task:
  name: FreeBSD
  freebsd_instance:
    matrix:
      image_family: freebsd-13-1
      image_family: freebsd-12-3
  install_script: pkg install -y git meson
  submodules_script: git submodule update --init --recursive --progress
  release_script:
    - mkdir ./output
    - meson setup build -Dprefix=$(realpath ./output) -Dmandir=/man -Dbindir=$(realpath ./output) --buildtype=release
    - meson install -C build
    - cd ./output
    - tar cvfJ ../"openSeaChest-$CIRRUS_BRANCH-$(uname -s)-$(uname -r)-$(uname -m).tar.xz" *
  binaries_artifacts:
    path: openSeaChest-*.tar.xz
    

task:
  name: windowsservercore:visualstudio2019
  windows_container:
    image: cirrusci/windowsservercore:visualstudio2019
  env:
    CIRRUS_SHELL: powershell

    # Path to the solution file relative to the root of the project.
    SOLUTION_FILE_PATH: "Make/VS.2019"

    # Configuration type to build.
    # You can convert this to a build matrix if you need coverage of multiple configuration types.
    # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    BUILD_CONFIGURATION: "Release"

    matrix:
      - PLATFORM: "x86"
      - PLATFORM: "x64"
  submodules_script: git submodule update --init --recursive --progress
  build_script: |
    $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
    echo "vswhere: $vsWhere"
    $msBuild = & $vswhere -products * -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe | select-object -first 1
    echo "msbuild: $msBuild"
    echo "$msBuild /m /p:Configuration=${env:BUILD_CONFIGURATION} ${env:SOLUTION_FILE_PATH} /p:Platform=${env:PLATFORM}"
    & $msBuild /m /p:Configuration=${env:BUILD_CONFIGURATION} ${env:SOLUTION_FILE_PATH} /p:Platform=${env:PLATFORM}
